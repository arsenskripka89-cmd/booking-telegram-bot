import json
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton,
                           CallbackQuery)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMINS

# ====================== BOOTSTRAP ======================
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

DATA_FILE = "bookings.json"
DRIVERS_FILE = "drivers.json"
ROUTES_FILE = "routes.json"
ADMINS_FILE = "admins.json"
LOCKS_FILE = "locks.json"
CANCEL_TEXT = "‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏"


# ====================== UTILS: JSON ======================
def _load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default


def _save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_data():
    return _load_json(DATA_FILE, {})


def save_data(d):
    _save_json(DATA_FILE, d)


def load_routes():
    return _load_json(ROUTES_FILE, {})


def save_routes(r):
    _save_json(ROUTES_FILE, r)


def load_admins():
    return _load_json(ADMINS_FILE, {"admins": ADMINS})


def save_admins(d):
    _save_json(ADMINS_FILE, d)


def load_locks():
    return _load_json(LOCKS_FILE, {"locked": []})


def save_locks(d):
    _save_json(LOCKS_FILE, d)


# ---- –§—É–Ω–∫—Ü—ñ—ó –±–ª–æ–∫—É–≤–∞–Ω–Ω—è ----
def lock_route(route_key):
    locks = load_locks()
    if route_key not in locks["locked"]:
        locks["locked"].append(route_key)
        save_locks(locks)


def unlock_route(route_key):
    locks = load_locks()
    if route_key in locks["locked"]:
        locks["locked"].remove(route_key)
        save_locks(locks)


def is_route_locked(route_key):
    return route_key in load_locks().get("locked", [])


# ---- Drivers helpers (+ –∞–≤—Ç–æ-–º—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É [ids]) ----
def _normalize_drivers(dr):
    norm, changed = [], False
    for x in dr:
        if isinstance(x, dict):
            norm.append({
                "id": int(x.get("id")),
                "name": (x.get("name") or "–ë–µ–∑ —ñ–º–µ–Ω—ñ").strip(),
                "phone": (x.get("phone") or "‚Äî").strip()
            })
        else:
            norm.append({"id": int(x), "name": "–ë–µ–∑ —ñ–º–µ–Ω—ñ", "phone": "‚Äî"})
            changed = True
    return norm, changed


def load_drivers():
    raw = _load_json(DRIVERS_FILE, {"drivers": []})
    lst, changed = _normalize_drivers(raw.get("drivers", []))
    if changed:
        _save_json(DRIVERS_FILE, {"drivers": lst})
    return {"drivers": lst}


def save_drivers(d):
    lst, _ = _normalize_drivers(d.get("drivers", []))
    _save_json(DRIVERS_FILE, {"drivers": lst})


def drivers_list():
    return load_drivers().get("drivers", [])


def find_driver_by_id(did: int):
    for d in drivers_list():
        if d["id"] == did:
            return d
    return None


def driver_label(d: dict) -> str:
    return f"{d['id']} ‚Äî {d.get('name','–ë–µ–∑ —ñ–º–µ–Ω—ñ')} ({d.get('phone','‚Äî')})"


# ====================== ROLES & MENUS ======================
def is_admin(uid: int) -> bool:
    admins = load_admins().get("admins", [])
    return uid in admins or uid in ADMINS


def is_driver(uid: int) -> bool:
    return any(x["id"] == uid for x in drivers_list()) or is_admin(uid)


def main_menu(uid: int) -> ReplyKeyboardMarkup:
    rows = [[KeyboardButton(text="üöê –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ")],
            [KeyboardButton(text="üìã –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")]]
    if is_driver(uid):
        rows.append([KeyboardButton(text="üë®‚Äç‚úàÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


def rows_of(items, n=3):
    return [items[i:i + n] for i in range(0, len(items), n)]


# ====================== SCHEDULE HELPERS ======================
def base_times_for(direction: str):
    # –†–æ–∫–∏—Ç–Ω–µ ‚Üí –ö–∏—ó–≤ ‚Äî —á–∞—Å—Ç—ñ—à–µ
    if ("–†–æ–∫–∏—Ç–Ω–µ" in direction) and ("‚Üí –ö–∏—ó–≤" in direction):
        return [
            "05:00", "05:30", "06:00", "07:00", "08:00", "09:00", "10:00",
            "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"
        ]
    # –ö–∏—ó–≤ ‚Üí –†–æ–∫–∏—Ç–Ω–µ ‚Äî —â–æ–≥–æ–¥–∏–Ω–∏
    return [f"{h:02d}:00" for h in range(8, 21)]


def user_dates_7days():
    today = datetime.now().date()
    return [(today + timedelta(days=i)) for i in range(7)]


def driver_dates_minus3_plus7():
    today = datetime.now().date()
    return [(today - timedelta(days=i)) for i in range(3, 0, -1)] + \
           [(today + timedelta(days=i)) for i in range(0, 8)]


def filtered_times_for_user(direction: str, selected_date):
    """–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Ä–µ–π—Å–∏, —â–æ —Å—Ç–∞—Ä—Ç—É—é—Ç—å –º–µ–Ω—à–µ –Ω—ñ–∂ –∑–∞ 20 —Ö–≤."""
    now = datetime.now()
    res = []
    for t in base_times_for(direction):
        h, m = map(int, t.split(":"))
        dep = datetime.combine(selected_date, datetime.min.time()) + timedelta(
            hours=h, minutes=m)
        if dep > now + timedelta(minutes=20):
            res.append(t)
    return res


def trip_key(date_str: str, time_str: str, direction: str) -> str:
    return f"{date_str} {time_str} {direction}"


# ====================== STATES ======================
class BookingStates(StatesGroup):
    waiting_for_seats = State()
    waiting_for_date = State()
    waiting_for_direction = State()
    waiting_for_time = State()
    waiting_for_comment = State()
    waiting_for_phone = State()
    driver_wait_phone = State()


class AdminStates(StatesGroup):
    waiting_for_direction = State()
    waiting_for_date = State()
    waiting_for_time = State()


class DriverMgmtStates(StatesGroup):
    waiting_for_action = State()
    waiting_for_new_driver = State()
    waiting_for_remove_driver = State()


class RoutesStates(StatesGroup):
    pick_date = State()
    pick_direction = State()
    pick_time = State()
    pick_driver = State()


class MyRoutesStates(StatesGroup):
    manual_date = State()
    manual_direction = State()
    manual_time = State()


class AdminAdminStates(StatesGroup):
    add_admin_wait = State()
    remove_admin_wait = State()


# ====================== START / CANCEL / HOME ======================
@dp.message(CommandStart())
async def start(msg: types.Message, state: FSMContext):
    await state.clear()
    data = load_data()
    uid = str(msg.from_user.id)
    if uid not in data:
        data[uid] = {"bookings": [], "phone": None}
        save_data(data)
    await msg.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É —Å–µ—Ä–≤—ñ—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ö–∏—ó–≤ ‚ÜîÔ∏è –†–æ–∫–∏—Ç–Ω–µ!",
        reply_markup=main_menu(msg.from_user.id))


@dp.message(F.text == CANCEL_TEXT)
async def cancel_any(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                     reply_markup=main_menu(msg.from_user.id))


@dp.message(F.text == "üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_main(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                     reply_markup=main_menu(msg.from_user.id))


# ====================== BOOKING (USER + DRIVER) ======================
@dp.message(F.text == "üöê –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ")
async def book_start(msg: types.Message, state: FSMContext):
    await state.update_data(driver_mode=False)
    kb = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="1"),
        KeyboardButton(text="2"),
        KeyboardButton(text="3")
    ], [KeyboardButton(text=CANCEL_TEXT)]],
                             resize_keyboard=True)
    await msg.answer("–°–∫—ñ–ª—å–∫–∏ –º—ñ—Å—Ü—å —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏?", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_seats)


@dp.message(BookingStates.waiting_for_seats)
async def process_seats(msg: types.Message, state: FSMContext):
    seats = msg.text.strip()
    if not seats.isdigit() or int(seats) <= 0:
        await msg.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –º—ñ—Å—Ü—å (1‚Äì9).")
        return
    await state.update_data(seats=seats)

    is_driver_mode = (await state.get_data()).get("driver_mode", False)
    dates = driver_dates_minus3_plus7(
    ) if is_driver_mode else user_dates_7days()
    kb = [[KeyboardButton(text=str(d))] for d in dates]
    kb.append([KeyboardButton(text=CANCEL_TEXT)])
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(BookingStates.waiting_for_date)


@dp.message(BookingStates.waiting_for_date)
async def process_date(msg: types.Message, state: FSMContext):
    try:
        selected_date = datetime.strptime(msg.text, "%Y-%m-%d").date()
    except:
        await msg.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —ñ–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(date=str(selected_date))
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöê –ö–∏—ó–≤ ‚Üí –†–æ–∫–∏—Ç–Ω–µ")],
                  [KeyboardButton(text="üöå –†–æ–∫–∏—Ç–Ω–µ ‚Üí –ö–∏—ó–≤")],
                  [KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_direction)


@dp.message(BookingStates.waiting_for_direction)
async def process_direction(msg: types.Message, state: FSMContext):
    direction = msg.text
    ud = await state.get_data()
    selected_date = datetime.strptime(ud["date"], "%Y-%m-%d").date()

    times = base_times_for(direction) if ud.get(
        "driver_mode") else filtered_times_for_user(direction, selected_date)
    if not times:
        await msg.answer("–ù–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–π—Å—ñ–≤.",
                         reply_markup=main_menu(msg.from_user.id))
        await state.clear()
        return

    kb_rows = rows_of([
        KeyboardButton(
            text=
            f"{'‚úÖ' if not is_route_locked(trip_key(str(selected_date), t, direction)) else '‚ùå'} {t}"
        ) for t in times
    ], 3)

    kb_rows.append([KeyboardButton(text=CANCEL_TEXT)])
    await state.update_data(direction=direction)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows,
                                                      resize_keyboard=True))
    await state.set_state(BookingStates.waiting_for_time)


@dp.message(BookingStates.waiting_for_time)
async def process_time(msg: types.Message, state: FSMContext):
    ud = await state.get_data()
    # üî• –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–µ–π—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    if is_route_locked(trip_key(ud["date"], msg.text.strip(),
                                ud["direction"])):
        await msg.answer(
            "üö´ –ù–∞–∂–∞–ª—å, –Ω–∞ —Ü–µ–π —Ä–µ–π—Å –º—ñ—Å—Ü—å –Ω–µ–º–∞—î. –£—Ç–æ—á–Ω—ñ—Ç—å —É –≤–æ–¥—ñ—è.",
            reply_markup=main_menu(msg.from_user.id))
        await state.clear()
        return
    await state.update_data(time=msg.text)
    direction = (await state.get_data())["direction"]
    if "–†–æ–∫–∏—Ç–Ω–µ" in direction and "‚Üí –ö–∏—ó–≤" in direction:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ë—ñ–ª—è –∞–≤—Ç–æ—Å—Ç–∞–Ω—Ü—ñ—ó")],
                      [KeyboardButton(text=CANCEL_TEXT)]],
            resize_keyboard=True)
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ê–≤—Ç–æ—Å—Ç–∞–Ω—Ü—ñ—è –ü—ñ–≤–¥–µ–Ω–Ω–∞")],
                      [KeyboardButton(text=CANCEL_TEXT)]],
            resize_keyboard=True)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –ø–æ—Å–∞–¥–∫–∏ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:",
                     reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_comment)


@dp.message(BookingStates.waiting_for_comment)
async def process_comment(msg: types.Message, state: FSMContext):
    await state.update_data(comment=msg.text)
    ud = await state.get_data()

    if ud.get("driver_mode"):
        await msg.answer(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–∞—Å–∞–∂–∏—Ä–∞ (+380XXXXXXXXX) –∞–±–æ —ñ–Ω—à–∏–π –æ–ø–∏—Å.")
        await state.set_state(BookingStates.driver_wait_phone)
        return

    data = load_data()
    uid = str(msg.from_user.id)
    phone = data.get(uid, {}).get("phone")
    if not phone:
        kb = ReplyKeyboardMarkup(keyboard=[[
            KeyboardButton(text="üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä", request_contact=True)
        ], [KeyboardButton(text=CANCEL_TEXT)]],
                                 resize_keyboard=True)
        await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)
        await state.set_state(BookingStates.waiting_for_phone)
    else:
        await finalize_booking(msg, state, phone, created_by_driver=False)


@dp.message(BookingStates.waiting_for_phone, F.contact)
async def process_contact(msg: types.Message, state: FSMContext):
    data = load_data()
    uid = str(msg.from_user.id)
    phone = msg.contact.phone_number
    if uid not in data:
        data[uid] = {"bookings": [], "phone": None}
    data[uid]["phone"] = phone
    save_data(data)
    await finalize_booking(msg, state, phone, created_by_driver=False)


@dp.message(BookingStates.driver_wait_phone)
async def process_driver_phone(msg: types.Message, state: FSMContext):
    phone = msg.text.strip()
    await finalize_booking(msg, state, phone, created_by_driver=True)


async def finalize_booking(msg: types.Message, state: FSMContext, phone: str,
                           created_by_driver: bool):
    data = load_data()
    uid = str(msg.from_user.id)
    ud = await state.get_data()

    comment = ud["comment"]
    if created_by_driver:
        comment = f"{comment} (—Å—Ç–≤–æ—Ä–µ–Ω–æ –≤–æ–¥—ñ—î–º)"

    booking = {
        "date": ud["date"],
        "time": ud["time"],
        "direction": ud["direction"],
        "seats": ud["seats"],
        "comment": comment,
        "phone": phone,
        "created_by_driver": created_by_driver,
        "driver_id": msg.from_user.id if created_by_driver else None,
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    if uid not in data:
        data[uid] = {
            "bookings": [],
            "phone": None if created_by_driver else phone
        }
    data[uid]["bookings"].append(booking)
    save_data(data)

    await state.clear()
    await msg.answer("‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!",
                     reply_markup=main_menu(msg.from_user.id))


# ====================== –ú–û–á –ë–†–û–ù–Æ–í–ê–ù–ù–Ø ======================
def clean_and_get_upcoming(user_id: str):
    data = load_data()
    user = data.get(user_id, {"bookings": [], "phone": None})
    now = datetime.now()
    upcoming = []
    for b in user.get("bookings", []):
        try:
            dep = datetime.strptime(f"{b['date']} {b['time']}",
                                    "%Y-%m-%d %H:%M")
            if dep > now:
                upcoming.append(b)
        except:
            continue
    data[user_id]["bookings"] = upcoming
    save_data(data)
    return upcoming


@dp.message(F.text == "üìã –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
async def my_bookings(msg: types.Message):
    uid = str(msg.from_user.id)
    upcoming = clean_and_get_upcoming(uid)
    if not upcoming:
        await msg.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
        return
    for b in upcoming:
        text = (
            f"üìÖ {b['date']} | üïí {b['time']} | {b['direction']} | {b['seats']} –º—ñ—Å—Ü—å\n"
            f"üìç {b['comment']}\n"
            f"üïí –°—Ç–≤–æ—Ä–µ–Ω–æ: {b.get('created_at','?')}")
        cb = f"cancel:{b['date']}|{b['time']}|{b['direction']}"
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=cb)
        ]])
        await msg.answer(text, reply_markup=kb)


@dp.callback_query(F.data.startswith("cancel:"))
async def cancel_booking_cb(call: CallbackQuery):
    _, payload = call.data.split(":", 1)
    date_str, time_str, direction = payload.split("|", 2)
    uid = str(call.from_user.id)
    data = load_data()
    user = data.get(uid, {"bookings": []})
    before = len(user["bookings"])
    user["bookings"] = [
        b for b in user["bookings"]
        if not (b["date"] == date_str and b["time"] == time_str
                and b["direction"] == direction)
    ]
    data[uid] = user
    save_data(data)
    if len(user["bookings"]) < before:
        await call.message.edit_text("‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await call.answer("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)


# ====================== ADMIN / DRIVER PANEL ======================
@dp.message(F.text == "üë®‚Äç‚úàÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(msg: types.Message, state: FSMContext):
    uid = msg.from_user.id
    if not is_driver(uid):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –≤–æ–¥—ñ—ó–≤/–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    rows = [[KeyboardButton(text="üöå –û–±—Ä–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É")],
            [KeyboardButton(text="üöê –î–æ–¥–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É")],
            [KeyboardButton(text="üìã –ú–æ—ó —Ä–µ–π—Å–∏")],
            [KeyboardButton(text="üïí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Å –≤—Ä—É—á–Ω—É")]]
    if is_admin(uid):
        rows.insert(3, [KeyboardButton(text="üìÖ –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–π—Å–∞–º–∏")])
        rows.insert(4, [KeyboardButton(text="üë®‚Äç‚úàÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏")])
    rows.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

    await msg.answer("üë®‚Äç‚úàÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å: –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
                     reply_markup=ReplyKeyboardMarkup(keyboard=rows,
                                                      resize_keyboard=True))


# ---- –ü–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–π—Å—É (–≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–æ —Ä–µ–π—Å—É) ----
@dp.message(F.text == "üöå –û–±—Ä–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É")
async def picker_direction(msg: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöê –ö–∏—ó–≤ ‚Üí –†–æ–∫–∏—Ç–Ω–µ")],
                  [KeyboardButton(text="üöå –†–æ–∫–∏—Ç–Ω–µ ‚Üí –ö–∏—ó–≤")],
                  [KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
        resize_keyboard=True)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=kb)
    await state.set_state(AdminStates.waiting_for_direction)


@dp.message(AdminStates.waiting_for_direction)
async def picker_date(msg: types.Message, state: FSMContext):
    direction = msg.text
    await state.update_data(direction=direction)
    dates = driver_dates_minus3_plus7()
    kb = [[KeyboardButton(text=str(d))] for d in dates]
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ä–µ–π—Å—É:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(AdminStates.waiting_for_date)


@dp.message(AdminStates.waiting_for_date)
async def picker_time(msg: types.Message, state: FSMContext):
    try:
        selected_date = datetime.strptime(msg.text, "%Y-%m-%d").date()
    except:
        await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —ñ–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    ud = await state.get_data()
    times = base_times_for(ud["direction"])
    kb = rows_of([KeyboardButton(text=t) for t in times], 3)
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await state.update_data(date=str(selected_date))
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(AdminStates.waiting_for_time)


@dp.message(AdminStates.waiting_for_time)
async def show_trip_bookings(msg: types.Message, state: FSMContext):
    ud = await state.get_data()
    direction, date_str, time_str = ud["direction"], ud["date"], msg.text

    data = load_data()
    bookings_list = []
    for _uid, info in data.items():
        for b in info.get("bookings", []):
            if b["direction"] == direction and b["date"] == date_str and b[
                    "time"] == time_str:
                bookings_list.append(b)

    if not bookings_list:
        await msg.answer("üö´ –ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å –Ω–∞ —Ü–µ–π —Ä–µ–π—Å.",
                         reply_markup=main_menu(msg.from_user.id))
        await state.clear()
        return

    bookings_list.sort(key=lambda x: x.get("created_at", ""))
    total = sum(int(b["seats"]) for b in bookings_list)
    text = f"üìÖ {date_str} | üïí {time_str} | {direction}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    for b in bookings_list:
        mark = " (–≤–æ–¥—ñ–π)" if b.get("created_by_driver") else ""
        text += f"üïí {b.get('created_at','?')} | üìû {b['phone']} | {b['seats']} –º—ñ—Å—Ü—å | {b['comment']}{mark}\n"
    text += f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n–í—Å—å–æ–≥–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ: {total} –º—ñ—Å—Ü—å"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üìã –ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω—å",
            callback_data=f"list:{date_str}|{time_str}|{direction}")
    ]])
    await msg.answer(text, reply_markup=kb)
    await state.clear()


@dp.callback_query(F.data.startswith("list:"))
async def show_detailed_list(call: CallbackQuery):
    _, payload = call.data.split(":", 1)
    date_str, time_str, direction = payload.split("|", 2)
    data = load_data()
    bookings = []
    for _uid, info in data.items():
        for b in info.get("bookings", []):
            if b["date"] == date_str and b["time"] == time_str and b[
                    "direction"] == direction:
                bookings.append(b)
    if not bookings:
        await call.answer("–ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
        return
    bookings.sort(key=lambda x: x.get("created_at", ""))
    text = f"üìÖ {date_str} | üïí {time_str} | {direction}\n\n"
    for b in bookings:
        text += f"üïí {b.get('created_at','?')} | üìû {b['phone']} | {b['seats']} –º—ñ—Å—Ü—å | {b['comment']}\n"
    await call.message.answer(text)


# ---- –†—É—á–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—î–º ----
@dp.message(F.text == "üöê –î–æ–¥–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É")
async def driver_manual_booking(msg: types.Message, state: FSMContext):
    if not is_driver(msg.from_user.id):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –≤–æ–¥—ñ—ó–≤.")
        return
    await state.update_data(driver_mode=True)
    kb = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="1"),
        KeyboardButton(text="2"),
        KeyboardButton(text="3")
    ], [KeyboardButton(text=CANCEL_TEXT)]],
                             resize_keyboard=True)
    await msg.answer("–°–∫—ñ–ª—å–∫–∏ –º—ñ—Å—Ü—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞?", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_seats)


# ---- –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏ (–ª–∏—à–µ –∞–¥–º—ñ–Ω–∏) ----
@dp.message(F.text == "üë®‚Äç‚úàÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏")
async def manage_drivers_menu(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    lst = drivers_list()
    text = "üë®‚Äç‚úàÔ∏è <b>–ü–æ—Ç–æ—á–Ω—ñ –≤–æ–¥—ñ—ó:</b>\n" + ("\n".join(
        [f"‚Ä¢ {driver_label(x)}" for x in lst]) if lst else "–ù–µ–º–∞—î")
    kb = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤–æ–¥—ñ—è"),
        KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è")
    ], [KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                             resize_keyboard=True)
    await msg.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(DriverMgmtStates.waiting_for_action)


@dp.message(DriverMgmtStates.waiting_for_action, F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≤–æ–¥—ñ—è")
async def add_driver_start(msg: types.Message, state: FSMContext):
    await msg.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n<id> <–Ü–º‚Äô—è (–º–æ–∂–µ –±—É—Ç–∏ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏)> <–¢–µ–ª–µ—Ñ–æ–Ω>\n\n–ü—Ä–∏–∫–ª–∞–¥:\n123456789 –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ +380501112233\n–ê–ë–û –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ ID."
    )
    await state.set_state(DriverMgmtStates.waiting_for_new_driver)


@dp.message(DriverMgmtStates.waiting_for_new_driver, F.forward_from)
async def add_driver_by_forward(msg: types.Message, state: FSMContext):
    new_id = msg.forward_from.id
    d = {"drivers": drivers_list()}
    if any(x["id"] == new_id for x in d["drivers"]):
        await msg.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —î –≤–æ–¥—ñ—î–º.")
    else:
        d["drivers"].append({"id": new_id, "name": "–ë–µ–∑ —ñ–º–µ–Ω—ñ", "phone": "‚Äî"})
        save_drivers(d)
        await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–æ–¥—ñ—è: {new_id}")
    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu(msg.from_user.id))


@dp.message(DriverMgmtStates.waiting_for_new_driver)
async def add_driver_by_text(msg: types.Message, state: FSMContext):
    parts = msg.text.strip().split()
    try:
        new_id = int(parts[0])
    except:
        await msg.answer("‚ùå –ü–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º ID.")
        return
    phone = "‚Äî"
    if len(parts) >= 2:
        last = parts[-1]
        if last.startswith("+") or last.replace("+", "").replace("-",
                                                                 "").isdigit():
            phone = last
            name_tokens = parts[1:-1]
        else:
            name_tokens = parts[1:]
    else:
        name_tokens = []
    name = " ".join(name_tokens).strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

    d = {"drivers": drivers_list()}
    if any(x["id"] == new_id for x in d["drivers"]):
        await msg.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —î –≤–æ–¥—ñ—î–º.")
    else:
        d["drivers"].append({"id": new_id, "name": name, "phone": phone})
        save_drivers(d)
        await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–æ–¥—ñ—è:\nID: {new_id}\nüë§ {name}\nüìû {phone}")
    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu(msg.from_user.id))


@dp.message(DriverMgmtStates.waiting_for_action, F.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è")
async def remove_driver_start(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å ID –≤–æ–¥—ñ—è, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    await state.set_state(DriverMgmtStates.waiting_for_remove_driver)


@dp.message(DriverMgmtStates.waiting_for_remove_driver)
async def remove_driver(msg: types.Message, state: FSMContext):
    try:
        rid = int(msg.text.strip())
    except:
        await msg.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID.")
        return
    d = {"drivers": [x for x in drivers_list() if x["id"] != rid]}
    save_drivers(d)
    await msg.answer(f"üóë –Ø–∫—â–æ –≤–æ–¥—ñ–π —ñ—Å–Ω—É–≤–∞–≤ ‚Äî –≤–∏–¥–∞–ª–µ–Ω–æ ID {rid}.")
    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu(msg.from_user.id))


# ---- –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ----
@dp.message(F.text == "üõ† –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def manage_admins_menu(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    a = load_admins()
    lst = a.get("admins", [])
    text = "üëë <b>–ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:</b>\n" + ("\n".join(
        [f"‚Ä¢ {x}" for x in lst]) if lst else "–ù–µ–º–∞—î")
    kb = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    ], [KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                             resize_keyboard=True)
    await msg.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state("admin_mgmt_wait")


@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin_prompt(msg: types.Message, state: FSMContext):
    await msg.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—á–∏—Å–ª–æ–º) –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await state.set_state(AdminAdminStates.add_admin_wait)

    # ---- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ----
    @dp.message(F.forward_from, AdminAdminStates.add_admin_wait)
    async def add_admin_by_forward(msg: types.Message, state: FSMContext):
        new_id = msg.forward_from.id
        a = load_admins()
        if new_id not in a["admins"]:
            a["admins"].append(new_id)
            save_admins(a)
            await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {new_id}")
        else:
            await msg.answer("‚ùó –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        await state.clear()
        await msg.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=main_menu(msg.from_user.id))

    @dp.message(AdminAdminStates.add_admin_wait)
    async def add_admin_by_id(msg: types.Message, state: FSMContext):
        try:
            new_id = int(msg.text.strip())
            a = load_admins()
            if new_id not in a["admins"]:
                a["admins"].append(new_id)
                save_admins(a)
                await msg.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {new_id}")
            else:
                await msg.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except ValueError:
            await msg.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID.")
        await state.clear()
        await msg.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=main_menu(msg.from_user.id))


@dp.message(F.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def remove_admin_prompt(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    await state.set_state(AdminAdminStates.remove_admin_wait)


@dp.message(AdminAdminStates.remove_admin_wait)
async def remove_admin(msg: types.Message, state: FSMContext):
    try:
        rid = int(msg.text.strip())
        a = load_admins()
        if rid in a["admins"]:
            a["admins"].remove(rid)
            save_admins(a)
            await msg.answer(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {rid}")
        else:
            await msg.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–º–∞—î.")
    except:
        await msg.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID.")
    await state.clear()


# ---- –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–π—Å–∞–º–∏ (–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–æ–¥—ñ—ó–≤) ----
@dp.message(F.text == "üìÖ –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–π—Å–∞–º–∏")
async def routes_manage_entry(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    dates = driver_dates_minus3_plus7()
    kb = [[KeyboardButton(text=str(d))] for d in dates]
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ä–µ–π—Å—É:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(RoutesStates.pick_date)


@dp.message(RoutesStates.pick_date)
async def routes_pick_direction(msg: types.Message, state: FSMContext):
    try:
        sel_date = datetime.strptime(msg.text, "%Y-%m-%d").date()
    except:
        await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(date=str(sel_date))
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöê –ö–∏—ó–≤ ‚Üí –†–æ–∫–∏—Ç–Ω–µ")],
                  [KeyboardButton(text="üöå –†–æ–∫–∏—Ç–Ω–µ ‚Üí –ö–∏—ó–≤")],
                  [KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
        resize_keyboard=True)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=kb)
    await state.set_state(RoutesStates.pick_direction)


@dp.message(RoutesStates.pick_direction)
async def routes_pick_time(msg: types.Message, state: FSMContext):
    direction = msg.text
    await state.update_data(direction=direction)
    times = base_times_for(direction)
    kb = rows_of([KeyboardButton(text=t) for t in times], 3)
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(RoutesStates.pick_time)


@dp.message(RoutesStates.pick_time)
async def routes_pick_driver(msg: types.Message, state: FSMContext):
    time_str = msg.text
    await state.update_data(time=time_str)

    lst = drivers_list()
    if not lst:
        await msg.answer(
            "–ù–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤. –î–æ–¥–∞–π—Ç–µ —É ¬´üë®‚Äç‚úàÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏¬ª.")
        await state.clear()
        return

    # –ø–æ–∫–∞–∑—É—î–º–æ "id ‚Äî –Ü–º'—è (—Ç–µ–ª–µ—Ñ–æ–Ω)"; –ø–∞—Ä—Å–∏–º–æ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ
    labels = [driver_label(d) for d in lst]
    kb = rows_of([KeyboardButton(text=lbl) for lbl in labels], 1)
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await msg.answer("–í–∫–∞–∂—ñ—Ç—å –≤–æ–¥—ñ—è (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É):",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(RoutesStates.pick_driver)


@dp.message(RoutesStates.pick_driver)
async def routes_assign_driver(msg: types.Message, state: FSMContext):
    m = re.match(r"^\s*(\d+)", msg.text.strip())
    if not m:
        await msg.answer("–í–≤–µ–¥—ñ—Ç—å –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É —ñ–∑ ID –≤–æ–¥—ñ—è.")
        return
    driver_id = int(m.group(1))
    if not find_driver_by_id(driver_id):
        await msg.answer("–¶–µ –Ω–µ ID –≤–æ–¥—ñ—è –∑—ñ —Å–ø–∏—Å–∫—É.")
        return

    ud = await state.get_data()
    date_str, time_str, direction = ud["date"], ud["time"], ud["direction"]

    routes = load_routes()
    key = trip_key(date_str, time_str, direction)
    routes[key] = {
        "driver_id": driver_id,
        "date": date_str,
        "time": time_str,
        "direction": direction
    }
    save_routes(routes)

    await state.clear()
    drv = find_driver_by_id(driver_id)
    await msg.answer(
        f"‚úÖ –í–æ–¥—ñ—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ:\n"
        f"üë§ {drv['name']} ({drv['phone']})\n"
        f"üìÖ {date_str} | üïí {time_str} | {direction}",
        reply_markup=main_menu(msg.from_user.id))


# ---- –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–π—Å—ñ–≤ (–≤–æ–¥—ñ–π –∞–±–æ –∞–¥–º—ñ–Ω) ----
@dp.message(F.text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ä–µ–π—Å")
async def lock_trip(msg: types.Message):
    if not is_driver(msg.from_user.id) and not is_admin(msg.from_user.id):
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Ä–µ–π—Å–∏.")
        return
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á —Ä–µ–π—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: YYYY-MM-DD HH:MM –ù–∞–ø—Ä—è–º–æ–∫")
    await dp.storage.set_state(msg.from_user.id, "lock_route_wait")


@dp.message(state="lock_route_wait")
async def do_lock_trip(msg: types.Message, state: FSMContext):
    route_key = msg.text.strip()
    lock_route(route_key)
    await msg.answer(f"üîí –†–µ–π—Å {route_key} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
    await state.clear()


@dp.message(F.text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ä–µ–π—Å")
async def unlock_trip(msg: types.Message):
    if not is_driver(msg.from_user.id) and not is_admin(msg.from_user.id):
        await msg.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
        return
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á —Ä–µ–π—Å—É –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:")
    await dp.storage.set_state(msg.from_user.id, "unlock_route_wait")


@dp.message(state="unlock_route_wait")
async def do_unlock_trip(msg: types.Message, state: FSMContext):
    route_key = msg.text.strip()
    unlock_route(route_key)
    await msg.answer(f"üîì –†–µ–π—Å {route_key} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    await state.clear()


# ---- –ú–æ—ó —Ä–µ–π—Å–∏ (–≤–æ–¥—ñ–π) ----
@dp.message(F.text == "üìã –ú–æ—ó —Ä–µ–π—Å–∏")
async def my_routes(msg: types.Message, state: FSMContext):
    if not is_driver(msg.from_user.id):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –≤–æ–¥—ñ—ó–≤.")
        return
    routes = load_routes()
    my = []
    today = datetime.now().date()
    for _, r in routes.items():
        if r.get("driver_id") == msg.from_user.id:
            d = datetime.strptime(r["date"], "%Y-%m-%d").date()
            if (today - timedelta(days=1)) <= d <= (today + timedelta(days=7)):
                my.append(r)
    if not my:
        await msg.answer("–ù–µ–º–∞—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Ä–µ–π—Å—ñ–≤ —É –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ.")
        return

    my.sort(key=lambda x: (x["date"], x["time"]))
    text = "üìã –í–∞—à—ñ —Ä–µ–π—Å–∏:\n\n" + "\n".join(
        [f"‚Ä¢ {r['date']} | {r['time']} | {r['direction']}" for r in my])
    await msg.answer(text)


# ---- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Å –≤—Ä—É—á–Ω—É (–≤–æ–¥—ñ–π) ----
@dp.message(F.text == "üïí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Å –≤—Ä—É—á–Ω—É")
async def driver_manual_view_date(msg: types.Message, state: FSMContext):
    if not is_driver(msg.from_user.id):
        await msg.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –≤–æ–¥—ñ—ó–≤.")
        return
    dates = driver_dates_minus3_plus7()
    kb = [[KeyboardButton(text=str(d))] for d in dates]
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(MyRoutesStates.manual_date)


@dp.message(MyRoutesStates.manual_date)
async def driver_manual_view_direction(msg: types.Message, state: FSMContext):
    try:
        sel = datetime.strptime(msg.text, "%Y-%m-%d").date()
    except:
        await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —ñ–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(date=str(sel))
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöê –ö–∏—ó–≤ ‚Üí –†–æ–∫–∏—Ç–Ω–µ")],
                  [KeyboardButton(text="üöå –†–æ–∫–∏—Ç–Ω–µ ‚Üí –ö–∏—ó–≤")],
                  [KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
        resize_keyboard=True)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=kb)
    await state.set_state(MyRoutesStates.manual_direction)


@dp.message(MyRoutesStates.manual_direction)
async def driver_manual_view_time(msg: types.Message, state: FSMContext):
    direction = msg.text
    await state.update_data(direction=direction)
    times = base_times_for(direction)
    kb = rows_of([KeyboardButton(text=t) for t in times], 3)
    kb.append([KeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                     reply_markup=ReplyKeyboardMarkup(keyboard=kb,
                                                      resize_keyboard=True))
    await state.set_state(MyRoutesStates.manual_time)


@dp.message(MyRoutesStates.manual_time)
async def driver_manual_view_show(msg: types.Message, state: FSMContext):
    ud = await state.get_data()
    date_str, direction, time_str = ud["date"], ud["direction"], msg.text

    data = load_data()
    bookings = []
    for _uid, info in data.items():
        for b in info.get("bookings", []):
            if b["date"] == date_str and b["time"] == time_str and b[
                    "direction"] == direction:
                bookings.append(b)

    if not bookings:
        await msg.answer("üö´ –ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å –Ω–∞ —Ü–µ–π —Ä–µ–π—Å.",
                         reply_markup=main_menu(msg.from_user.id))
        await state.clear()
        return

    bookings.sort(key=lambda x: x.get("created_at", ""))
    total = sum(int(b["seats"]) for b in bookings)
    text = f"üìÖ {date_str} | üïí {time_str} | {direction}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    for b in bookings:
        mark = " (–≤–æ–¥—ñ–π)" if b.get("created_by_driver") else ""
        text += f"üïí {b.get('created_at','?')} | üìû {b['phone']} | {b['seats']} –º—ñ—Å—Ü—å | {b['comment']}{mark}\n"
    text += f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n–í—Å—å–æ–≥–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ: {total} –º—ñ—Å—Ü—å"
    await msg.answer(text, reply_markup=main_menu(msg.from_user.id))
    await state.clear()


# ====================== RUN ======================
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
