import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMINS

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

DATA_FILE = "bookings.json"

class BookingStates(StatesGroup):
    waiting_for_seats = State()
    waiting_for_direction = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_comment = State()
    waiting_for_phone = State()

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def main_menu(is_driver=False):
    buttons = [
        [KeyboardButton(text="üöê –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ")],
        [KeyboardButton(text="üìã –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")]
    ]
    if is_driver:
        buttons.append([KeyboardButton(text="üë®‚Äç‚úàÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_available_dates():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–∞ 7 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥"""
    today = datetime.now().date()
    return [(today + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]

def get_times_for_direction(direction, selected_date):
    """–ì–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ —á–∞—Å—É –¥–ª—è –Ω–∞–ø—Ä—è–º–∫—É + —Ñ—ñ–ª—å—Ç—Ä –ø–æ 20 —Ö–≤–∏–ª–∏–Ω–∞—Ö"""
    now = datetime.now()
    today = now.date()
    times = []

    if "–†–æ–∫–∏—Ç–Ω–µ" in direction and "–ö–∏—ó–≤" in direction:
        times = [
            "05:00", "05:30", "06:00", "07:00", "08:00", "09:00",
            "10:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"
        ]
    elif "–ö–∏—ó–≤" in direction and "–†–æ–∫–∏—Ç–Ω–µ" in direction:
        times = [f"{h:02d}:00" for h in range(8, 21)]

    # –Ø–∫—â–æ –¥–∞—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –º–∏–Ω—É–ª—ñ —Ä–µ–π—Å–∏ —ñ —Ç—ñ, —â–æ —á–µ—Ä–µ–∑ <20 —Ö–≤
    if selected_date == today.strftime("%Y-%m-%d"):
        valid_times = []
        current_time = now + timedelta(minutes=20)
        for t in times:
            dep = datetime.strptime(f"{selected_date} {t}", "%Y-%m-%d %H:%M")
            if dep > current_time:
                valid_times.append(t)
        times = valid_times

    return times

@dp.message(CommandStart())
async def start(msg: types.Message, state: FSMContext):
    await state.clear()
    data = load_data()
    user_id = str(msg.from_user.id)
    if user_id not in data:
        data[user_id] = {"bookings": [], "phone": None}
        save_data(data)
    is_driver = msg.from_user.id in ADMINS
    await msg.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É —Å–µ—Ä–≤—ñ—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ö–∏—ó–≤ ‚ÜîÔ∏è –†–æ–∫–∏—Ç–Ω–µ!",
        reply_markup=main_menu(is_driver)
    )

@dp.message(F.text == "üöê –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ")
async def book_start(msg: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
            [KeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")]
        ], resize_keyboard=True
    )
    await msg.answer("–°–∫—ñ–ª—å–∫–∏ –º—ñ—Å—Ü—å —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏?", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_seats)

@dp.message(F.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
async def cancel_booking(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu(msg.from_user.id in ADMINS))

@dp.message(BookingStates.waiting_for_seats)
async def process_seats(msg: types.Message, state: FSMContext):
    seats = msg.text.strip()
    if not seats.isdigit():
        await msg.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    
    await state.update_data(seats=seats)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöê –ö–∏—ó–≤ ‚Üí –†–æ–∫–∏—Ç–Ω–µ")],
            [KeyboardButton(text="üöå –†–æ–∫–∏—Ç–Ω–µ ‚Üí –ö–∏—ó–≤")],
            [KeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")]
        ], resize_keyboard=True
    )
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_direction)

@dp.message(BookingStates.waiting_for_direction)
async def process_direction(msg: types.Message, state: FSMContext):
    direction = msg.text
    await state.update_data(direction=direction)
    available_dates = get_available_dates()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for date_str in available_dates:
        kb.add(KeyboardButton(text=date_str))
    kb.add(KeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏"))
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏:", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_date)

@dp.message(BookingStates.waiting_for_date)
async def process_date(msg: types.Message, state: FSMContext):
    selected_date = msg.text.strip()
    user_data = await state.get_data()
    direction = user_data["direction"]
    times = get_times_for_direction(direction, selected_date)

    if not times:
        await msg.answer("üö´ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–π—Å—ñ–≤ –Ω–∞ —Ü—é –¥–∞—Ç—É.")
        await state.clear()
        return

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for t in times:
        kb.add(KeyboardButton(text=t))
    kb.add(KeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏"))

    await state.update_data(date=selected_date)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å —Ä–µ–π—Å—É:", reply_markup=kb)
    await state.set_state(BookingStates.waiting_for_time)

@dp.message(BookingStates.waiting_for_time)
async def process_time(msg: types.Message, state: FSMContext):
    await state.update_data(time=msg.text)
    await msg.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –º—ñ—Å—Ü–µ –ø–æ—Å–∞–¥–∫–∏:")
    await state.set_state(BookingStates.waiting_for_comment)

@dp.message(BookingStates.waiting_for_comment)
async def process_comment(msg: types.Message, state: FSMContext):
    await state.update_data(comment=msg.text)
    
    data = load_data()
    user_id = str(msg.from_user.id)
    phone = data[user_id].get("phone")
    
    if not phone:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")]
            ], resize_keyboard=True
        )
        await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)
        await state.set_state(BookingStates.waiting_for_phone)
    else:
        user_data = await state.get_data()
        booking = {
            "date": user_data["date"],
            "time": user_data["time"],
            "direction": user_data["direction"],
            "seats": user_data["seats"],
            "comment": user_data["comment"],
            "phone": phone
        }
        data[user_id]["bookings"].append(booking)
        save_data(data)
        await state.clear()
        await msg.answer("‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", reply_markup=main_menu(msg.from_user.id in ADMINS))

@dp.message(BookingStates.waiting_for_phone, F.contact)
async def process_contact(msg: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(msg.from_user.id)
    phone = msg.contact.phone_number
    data[user_id]["phone"] = phone
    save_data(data)
    
    user_data = await state.get_data()
    booking = {
        "date": user_data["date"],
        "time": user_data["time"],
        "direction": user_data["direction"],
        "seats": user_data["seats"],
        "comment": user_data["comment"],
        "phone": phone
    }
    data[user_id]["bookings"].append(booking)
    save_data(data)
    
    await state.clear()
    await msg.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    await msg.answer("–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", reply_markup=main_menu(msg.from_user.id in ADMINS))

@dp.message(F.text == "üìã –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
async def my_bookings(msg: types.Message):
    data = load_data()
    user_id = str(msg.from_user.id)
    bookings = data.get(user_id, {}).get("bookings", [])
    if not bookings:
        await msg.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
        return

    text = "–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
    for b in bookings:
        text += f"üìÖ {b['date']} | üïí {b['time']} | {b['direction']} | {b['seats']} –º—ñ—Å—Ü—å\nüìç {b['comment']}\n\n"
    await msg.answer(text)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
